"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const vlc_static_1 = __importDefault(require("vlc-static"));
const unique_string_1 = __importDefault(require("unique-string"));
const internal_ip_1 = __importDefault(require("internal-ip"));
const get_port_1 = __importDefault(require("get-port"));
const execa_1 = __importDefault(require("execa"));
const got_1 = __importDefault(require("got"));
const query_string_1 = __importDefault(require("query-string"));
const url_join_1 = __importDefault(require("url-join"));
async function vlc() {
    const password = unique_string_1.default();
    const ip = await internal_ip_1.default.v4();
    const port = await get_port_1.default();
    const address = `http://${ip}`;
    const instance = execa_1.default(vlc_static_1.default(), ["--extraintf", "http", "--intf", "wx", "--http-host", ip, "--http-port", port.toString(), "--http-password", password]);
    return new class VLC {
        /**
        Get the current player status.
        */
        async info() {
            const { body } = await got_1.default(url_join_1.default(address, "requests", "status.json"), {
                port,
                password,
                responseType: "json"
            });
            return body;
        }
        /**
        Get the current playlist information.
        */
        async playlist() {
            const { body } = await got_1.default(url_join_1.default(address, "requests", "playlist.json"), {
                port,
                password,
                responseType: "json"
            });
            return body;
        }
        /**
        Execute a command.

        @param command The [command](https://wiki.videolan.org/VLC_HTTP_requests#Full_command_list) to execute.
        @param options The data to encode with the command.
        */
        async command(command, options) {
            await got_1.default(url_join_1.default(address, "requests", "status.json", `?${query_string_1.default.stringify({
                command,
                ...options
            }).replace(/\+/, "%20")}`), {
                port,
                password
            });
        }
        /**
        Kill the process.
        */
        kill() {
            instance.kill();
        }
    }();
}
module.exports = vlc;
//# sourceMappingURL=index.js.map